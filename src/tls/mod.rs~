use actix_web::{web::Data, App, HttpResponse, HttpServer};
use std::sync::Arc;
use rustls::ServerConfig;
use rustls::pki_types::{CertificateDer as Certificate, PrivateKeyDer as PrivateKey};

#[derive(Clone)]
pub struct TlsConfig {
    pub config: Arc<ServerConfig>,
}

impl TlsConfig {
    pub fn new(cert: Certificate<'static>, key: PrivateKey<'static>) -> Self {
        let config = ServerConfig::builder()
            .with_no_client_auth()
            .with_single_cert(vec![cert], key)
            .expect("TLS configuration failed");

        TlsConfig {
            config: Arc::new(config),
        }
    }
}

// Configuración del servidor HTTPS
pub async fn configure_https(tls_config: Arc<TlsConfig>) -> std::io::Result<()> {
    HttpServer::new(move || {
        create_app(tls_config.clone())
    })
    .bind(("0.0.0.0", 8443))?
    .run()
    .await
}

// Función `create_app` para crear la aplicación
pub fn create_app(tls_config: Arc<TlsConfig>) -> App<impl actix_service::ServiceFactory> {
    App::new()
        .app_data(Data::new(tls_config))
        .route("/", actix_web::web::get().to(|| async {
            HttpResponse::Ok().body("Hello, HTTPS!")
        }))
}

